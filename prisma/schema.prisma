// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String?
  phone     String?
  role      UserRole  @default(USER)
  verified  Boolean
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Session   Session[]

  @@index([email])
  @@index([userId])
}

enum UserRole {
  USER
  ADMIN
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Subscription {
  userId                 String    @unique
  stripeCustomerId       String    @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@id([userId, stripeCustomerId])
}

model College {
  id         String       @id @default(cuid())
  name       String
  address    String?
  userId     String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  holiday    Holiday[]
  department Department[]
}

model Holiday {
  id        String   @id @default(cuid())
  name      String
  date      DateTime
  college   College  @relation(fields: [collegeId], references: [id])
  collegeId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Department {
  id        String    @id @default(cuid())
  name      String
  code      String
  college   College   @relation(fields: [collegeId], references: [id])
  collegeId String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  course    Course[]
  faculty   Faculty[]

  @@index([userId])
}

model Course {
  id                    String                  @id @default(cuid())
  name                  String
  department            Department              @relation(fields: [departmentId], references: [id])
  departmentId          String
  userId                String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  courseEnrolledStudent CourseEnrolledStudent[]
  period                Period[]
  section               Section[]

  @@index([userId])
}

model Student {
  id                    String                  @id @default(cuid())
  name                  String
  regNumber             String
  email                 String
  userId                String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  CourseEnrolledStudent CourseEnrolledStudent[]

  @@index([regNumber])
  @@index([userId])
}

model CourseEnrolledStudent {
  id              String            @id @default(cuid())
  batchYear       Int
  course          Course            @relation(fields: [courseId], references: [id])
  courseId        String
  student         Student           @relation(fields: [studentId], references: [id])
  studentId       String
  userId          String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  electiveSubject ElectiveSubject[]
  enrollment      Enrollment[]

  @@index([userId])
}

model Day {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Period {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  version   Int
  isActive  Boolean
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Section {
  id              String            @id @default(cuid())
  name            String
  batchYear       Int
  semester        Int
  course          Course            @relation(fields: [courseId], references: [id])
  courseId        String
  userId          String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ElectiveSubject ElectiveSubject[]
  Enrollment      Enrollment[]

  @@index([userId])
}

model Subject {
  id              String            @id @default(cuid())
  name            String
  code            String
  electiveName    String?
  userId          String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ElectiveSubject ElectiveSubject[]
  facultySubject  FacultySubject[]
}

model ElectiveSubject {
  id                      String                @id @default(cuid())
  courseEnrolledStudent   CourseEnrolledStudent @relation(fields: [courseEnrolledStudentId], references: [id])
  courseEnrolledStudentId String
  subject                 Subject               @relation(fields: [subjectId], references: [id])
  subjectId               String
  section                 Section               @relation(fields: [sectionId], references: [id])
  sectionId               String
  userId                  String
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt

  @@index([courseEnrolledStudentId])
  @@index([userId])
}

model Enrollment {
  id                      String                @id @default(cuid())
  rollNumber              Int
  courseEnrolledStudent   CourseEnrolledStudent @relation(fields: [courseEnrolledStudentId], references: [id])
  courseEnrolledStudentId String
  section                 Section               @relation(fields: [sectionId], references: [id])
  sectionId               String
  joinedAt                DateTime
  leftAt                  DateTime?
  userId                  String
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt

  @@index([userId])
}

model Faculty {
  id             String           @id @default(cuid())
  name           String
  department     Department       @relation(fields: [departmentId], references: [id])
  departmentId   String
  userId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  FacultySubject FacultySubject[]

  @@index([userId])
}

model FacultySubject {
  id        String   @id @default(cuid())
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId String
  faculty   Faculty  @relation(fields: [facultyId], references: [id])
  facultyId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
