// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String?
  phone     String?
  role      UserRole  @default(USER)
  verified  Boolean
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Session   Session[]

  @@index([email])
  @@index([userId])
}

enum UserRole {
  USER
  ADMIN
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Subscription {
  userId                 String    @unique
  stripeCustomerId       String    @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@id([userId, stripeCustomerId])
}

model College {
  id        String    @id @default(cuid())
  name      String
  address   String?
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  holiday   Holiday[]
}

model Holiday {
  id        String   @id @default(cuid())
  name      String
  date      DateTime
  college   College  @relation(fields: [collegeId], references: [id])
  collegeId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
